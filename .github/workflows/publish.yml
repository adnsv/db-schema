name: Build and Publish Releases

#on:
#  release:
#    types: [created]

on: [push, pull_request]

jobs:
  build-windows:
    name: Windows Binaries
    runs-on: windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          install: mingw-w64-x86_64-toolchain mingw-w64-x86_64-sqlite3
          msystem: MINGW64
          path-type: inherit

      - uses: actions/checkout@v3   

      - uses: actions/setup-go@v3
        with: 
          go-version-file: ./go.mod 
          cache: true

      - name: Add $GOPATH/bin to $PATH
        run: |
          echo "$(go env GOPATH)/bin" >> "$GITHUB_PATH"
        shell: msys2 {0}

      - run: go version
        shell: msys2 {0}

      - run: go env
        shell: msys2 {0}

      - name: Install dependencies
        run: go get ./...        
        shell: msys2 {0}

      #- name: Version
      #  run: echo APP_VERSION=$(echo ${GITHUB_REF} | rev | cut -d'/' -f 1 | rev ) >> ${GITHUB_ENV}

      - name: Build 
        run: GOOS=windows GOARCH=amd64 CGO_ENABLED=1 go build -v -ldflags "-X main.app_ver=v0.1.0" .
        shell: msys2 {0}

      - uses: vimtor/action-zip@v1
        with:
          files: db-schema.exe
          dest: db-schema-windows-amd64.zip

      - name: Check
        run: ls
        

  build-macos:
    name: MacOS Binaries
    runs-on: macos-latest
    steps:
      - run: brew update

      - run: brew install sqlite3

      - uses: actions/checkout@v3   

      - uses: actions/setup-go@v3
        with: 
          go-version-file: ./go.mod 
          cache: true

      - name: Add $GOPATH/bin to $PATH
        run: |
          echo "$(go env GOPATH)/bin" >> "$GITHUB_PATH"

      - run: go version

      - run: go env

      - name: Install dependencies
        run: go get ./...        

      - name: Version
        run: echo APP_VERSION=$(echo ${GITHUB_REF} | rev | cut -d'/' -f 1 | rev ) >> ${GITHUB_ENV}

      - name: Build 
        run: GOOS=darwin GOARCH=amd64 CGO_ENABLED=1 go build -v -ldflags "-X main.app_ver=v0.1.0" .

      - uses: vimtor/action-zip@v1
        with:
          files: db-schema
          dest: db-schema-macos-amd64.zip

      - name: Build 
        run: GOOS=darwin GOARCH=arm64 CGO_ENABLED=1 go build -v -ldflags "-X main.app_ver=v0.1.0" .

      - uses: vimtor/action-zip@v1
        with:
          files: db-schema
          dest: db-schema-macos-arm64.zip

      - name: Check
        run: ls

  build-linux:
    name: Linux Binaries
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3   

      - uses: actions/setup-go@v3
        with: 
          go-version-file: ./go.mod 
          cache: true

      - run: |
          sudo apt-get update && sudo apt-get install gcc-aarch64-linux-gnu gcc-mingw-w64

      - name: Add $GOPATH/bin to $PATH
        run: |
          echo "$(go env GOPATH)/bin" >> "$GITHUB_PATH"

      - run: go version

      - run: go env

      - name: Install dependencies
        run: go get ./...        

      - name: Version
        run: echo APP_VERSION=$(echo ${GITHUB_REF} | rev | cut -d'/' -f 1 | rev ) >> ${GITHUB_ENV}

      - name: Build linux-amd64
        run: GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build -v -ldflags "-X main.app_ver=v0.1.0" .

      - uses: vimtor/action-zip@v1
        with:
          files: db-schema
          dest: db-schema-linux-amd64.zip

      - name: Build linux-arm64
        run: GOOS=linux GOARCH=arm64 CC=aarch64-linux-gnu-gcc CGO_ENABLED=1 go build -v -ldflags "-X main.app_ver=v0.1.0" .

      - uses: vimtor/action-zip@v1
        with:
          files: db-schema
          dest: db-schema-linux-arm64.zip

      - name: Check
        run: ls

